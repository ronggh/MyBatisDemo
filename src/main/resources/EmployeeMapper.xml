<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace:名称空间，指定为接口的全类名 -->
<mapper namespace="dao.EmployeeMapper">
    <!--
    id：唯一标识
    resultType：返回值类型，类的全路径名
    #{id}：从传递过来的参数中取出id值
    相当于：
    public Employee getEmpById(Integer id);
    如果字段名与实体类中的属性名不同,需要在查询语句中使用别名,如:
    数据库中名为last_name, 实体类中的属性名为lastName
    #{},代表实体类中的属性
    select id,last_name lastName ,email,gender from t_employee where id = #{id}
    MyBatis查找时，先找指定databaseId的对应语句，如果没有，则使用不带标识的
     -->
    <!-- 查询指定id的数据 -->
    <!--public Employee getEmpById(int id);-->
    <select id="getEmpById" resultType="entity.Employee">
		select id,lastName,email,gender from t_employee where id = #{id}
	</select>
    <select id="getEmpById" resultType="entity.Employee" databaseId="mysql">
		select id,lastName,email,gender from t_employee where id = #{id}
	</select>
    <select id="getEmpById" resultType="entity.Employee" databaseId="oracle">
		select employee_id id,last_name lastName,email,gender from tbl_employee where employee_id = #{id}
	</select>
    <!-- 新增一条员工数据 -->
    <!-- public void addEmployee(Employee employee); -->
    <!--
        parameterType:可以省略
        useGeneratedKeys:true,使用自增主健获取值的方式
        keyProperty:获取的主健值存到这个属性里
     -->
    <insert id="addEmployee" parameterType="entity.Employee" useGeneratedKeys="true" keyProperty="id">
        insert into t_employee (lastName,gender,email) VALUES (#{lastName},#{gender},#{email})
    </insert>
    <!--
	获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
    <insert id="addEmployee" databaseId="oracle">
        <!--
        keyProperty:查出的主键值封装给javaBean的哪个属性
        order="BEFORE":当前sql在插入sql之前运行
               AFTER：当前sql在插入sql之后运行
        resultType:查出的数据的返回值类型

        BEFORE运行顺序：
            先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
            在运行插入的sql；就可以取出id属性对应的值
        AFTER运行顺序：
            先运行插入的sql（从序列中取出新值作为id）；
            再运行selectKey查询id的sql；
         -->
        <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
            <!-- 编写查询主键的sql语句 -->
            <!-- BEFORE-->
            select EMPLOYEES_SEQ.nextval from dual
            <!-- AFTER：
             select EMPLOYEES_SEQ.currval from dual -->
        </selectKey>

        <!-- 插入时的主键是从序列中拿到的 -->
        <!-- BEFORE:-->
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->})
        <!-- AFTER：
        insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL)
        values(employees_seq.nextval,#{lastName},#{email}) -->
    </insert>
    <!-- 更新一个员工-->
    <!--public void updateEmployee(Employee employee);-->
    <update id="updateEmployee">
        update t_employee set lastName=#{lastName},gender=#{gender},email=#{email} where id=#{id}
    </update>
    <!--删除一个员工-->
    <!--public void deleteEmployee(int id);-->
    <delete id="deleteEmployee">
        delete from t_employee where id=#{id}
    </delete>

    <!--
        查询，传多个参数的情况
        MyBatis把多参数封装成Map，key为param1,param2,...
        参数按param1,param2,....来传递，
    -->
    <!--public Employee getEmployeeByIdAndLastName(int id, String lastName);-->
    <select id="getEmployeeByIdAndLastName" resultType="entity.Employee">
        select id,lastName,email,gender from t_employee where id = #{param1} and lastName=#{param2}
    </select>
    <!-- 使用命名参数的方式 -->
    <!--public Employee getEmployeeByIdAndLastName2(@Param("id") int id, @Param("lastName") String lastName)-->
    <select id="getEmployeeByIdAndLastName2" resultType="entity.Employee">
        select id,lastName,email,gender from t_employee where id = #{id} and lastName=#{lastName}
    </select>

    <!--// 查询，多个参数，使用Map传递-->
    <!--public Employee getEmployeeByMap(Map<String,Object> map);-->
    <select id="getEmployeeByMap" resultType="entity.Employee">
        select id,lastName,email,gender from t_employee where id = #{id} and lastName=#{lastName}
    </select>

    <!-- 查询结果返回List -->
    <!--resultType：如果返回的是一个集合，要写集合中元素的类型  -->
    <!--public List<Employee> getByLastNameLike(String lastName)-->
    <select id="getByLastNameLike" resultType="entity.Employee">
        select id,lastName,email,gender from t_employee where lastName like #{lastName}
    </select>
    <!--// 查询单条记录，返回Map类型-->
    <!--public Map<String,Object> getEmployeeByIdReturnMap(int id);-->
    <select id="getEmployeeByIdReturnMap" resultType="map">
        select id,lastName,email,gender from t_employee where id = #{id}
    </select>

    <!--// 查询多条记录，返回Map类型，key为记录的主健值，value为Employee对象-->
    <!--public Map<Integer,Employee> getEmployeeByLastNameLikeReturnMap(String lastName);-->
    <!-- resultType: 为Map中数据的类型，即Employee -->
    <select id="getEmployeeByLastNameLikeReturnMap" resultType="entity.Employee">
        select id,lastName,email,gender from t_employee where lastName like #{lastName}
    </select>
</mapper>